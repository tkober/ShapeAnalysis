///////
// Sets

%s PVar {linsenTopf, linse, topf, guteLinsen, schlechteLinsen}

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

////////////////////////////////////////////////////////////////////////
// Transition system for a function that creates a linsenTopf

// TODO insert assertions after list creation (???)

L0  Set_Null_L(linsenTopf)					L1
// The next two lines fix the program
//L0a Set_Null_L(guteLinsen)					L0b
//L0b Set_Null_L(schlechteLinsen)			L1
L1  Malloc_L(linse)							L1a
L1a uninterpreted()							L2
L1a uninterpreted()							L2a
L2  Set_Ist_Gut_True(linse)				L3
L2a Set_Ist_Gut_False(linse)				L3
L3  Set_Ist_Schlecht_Opposite(linse)	L4
L4  Copy_Var_L(linsenTopf, linse)		L5
L5  Copy_Var_L(topf, linsenTopf)			L6
L6  uninterpreted()							L7
L6  uninterpreted()							L12
L7  Malloc_L(linse)							L7a
L7a uninterpreted()							L8
L7a uninterpreted()							L8a
L8  Set_Ist_Gut_True(linse)				L9
L8a Set_Ist_Gut_False(linse)				L9
L9  Set_Ist_Schlecht_Opposite(linse)	L10
L10 Set_Next_L(topf, linse)				L11
L11 Copy_Var_L(topf, linse)				L6

L12 Copy_Var_L(topf, linsenTopf)			L13
L13 Is_Null_Var(topf)						exit
L13 Is_Not_Null_Var(topf)					L14
L14 Copy_Var_L(linse, topf)				L15
L15 Get_Next_L(topf, topf)					L16
L16 Is_Good(linse)							L17
L16 Is_Not_Good(linse)						L20
L17 Set_Next_Null_L(linse)					L18
L18 Set_Next_L(linse, guteLinsen)		L19
L19 Copy_Var_L(guteLinsen, linse)		L13
L20 Set_Next_Null_L(linse)					L21
L21 Set_Next_L(linse, schlechteLinsen) L22
L22 Copy_Var_L(schlechteLinsen, linse) L13

exit Assert_No_Reachable_Arbitrary()		error
exit Assert_No_Good_n_Bad()					error
exit Assert_Good_Linsen(guteLinsen)		error
exit Assert_Bad_Linsen(schlechteLinsen)  error
exit Assert_No_Leak_End(guteLinsen, schlechteLinsen) error

%%

L0, L12, exit, error

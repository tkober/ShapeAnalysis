///////
// Sets

%s PVar {linsenTopf, linse, topf, guteLinsen, schlechteLinsen}

#include "predicates.tvp"

%%

#include "actions.tvp"

%%

////////////////////////////////////////////////////////////////////////
// Transition system for a function that creates a linsenTopf

L0  Set_Null_L(linsenTopf)					L0a	// Linse* linsenTopf = NULL;
// Program fix
L0a Set_Null_L(guteLinsen)					L0b	// Linse* guteLinsen = NULL;
L0b Set_Null_L(schlechteLinsen)			L1	// Linse* schlechteLinsen = NULL;
L1  Malloc_L(linse)									L1a	// linse = malloc(sizeof(Linse));
L1a uninterpreted()									L2	// linse->istGut = (rand() % 2) ? true: false;
L1a uninterpreted()									L2a
L2  Set_Ist_Gut_True(linse)				L3
L2a Set_Ist_Gut_False(linse)				L3
L3  Set_Ist_Schlecht_Opposite(linse)	L4			// linse->istSchlecht = !linse->istGut;
L4  Copy_Var_L(linsenTopf, linse)		L5			// linsenTopf = linse;
L5  Copy_Var_L(topf, linsenTopf)			L6			// topf = linsenTopf;
L6  uninterpreted()							L7			// while ( i <= n ) {
L6  uninterpreted()							L12
L7  Malloc_L(linse)							L7a		// 	linse = malloc(sizeof(Linse));
L7a uninterpreted()							L8			// 	linse->istGut = (rand % 2) ? true: false;
L7a uninterpreted()							L8a
L8  Set_Ist_Gut_True(linse)				L9
L8a Set_Ist_Gut_False(linse)				L9
L9  Set_Ist_Schlecht_Opposite(linse)	L10		// 	linse->istSchlecht = !linse->istGut;
L10 Set_Next_L(topf, linse)				L11		//		topf->next = linse;
L11 Copy_Var_L(topf, linse)				L6			//		topf = linse;
																// }

L12 Copy_Var_L(topf, linsenTopf)			L13		// topf = LinsenTopf;
L13 Is_Null_Var(topf)						exit		// while (topf) {
L13 Is_Not_Null_Var(topf)					L14
L14 Copy_Var_L(linse, topf)				L15		// 	linse = topf;
L15 Get_Next_L(topf, topf)					L16		// 	topf = topf->next;
L16 Is_Good(linse)							L17		// 	if (linse->istGut) {
L16 Is_Not_Good(linse)						L20
L17 Set_Next_Null_L(linse)					L18		//			linse->next = NULL;	//Additional statement for analysis, no semantic change
L18 Set_Next_L(linse, guteLinsen)		L19		//			linse->next = guteLinsen;
L19 Copy_Var_L(guteLinsen, linse)		L13		//			guteLinsen = linse;
																//		} else {
L20 Set_Next_Null_L(linse)					L21		//			linse->next = NULL;	//Additional statement for analysis, no semantic change
L21 Set_Next_L(linse, schlechteLinsen) L22		//			linse->next = schlechteLinsen;
L22 Copy_Var_L(schlechteLinsen, linse) L13		//			schlechteLinsen = linse;
																//		}
																// }

exit Set_Null_L(linse)						exitA
exitA Set_Null_L(linsenTopf)				exitB

exitB Assert_No_Reachable_Arbitrary()		error
exitB Assert_No_Good_n_Bad()					error
exitB Assert_Good_Linsen(guteLinsen)		error
exitB Assert_Bad_Linsen(schlechteLinsen)  error
exitB Assert_No_Leak_End(guteLinsen, schlechteLinsen) error

%%

L0, exitB, error

%action uninterpreted() { 
  %t "uninterpreted"
}

%action skip() { 
  %t "skip"
}

////////////////////////////////////////////////////////////////////////////
// own actions

%action Set_Ist_Gut_Halb(lhs) {
	%t lhs + "->istGut = 1/2"
	{
		istGut(v) = (lhs(v) & 1/2) | (!lhs(v) & istGut(v))
	}
}

%action Set_Ist_Gut_False(lhs) {
	%t lhs + "->istGut = false"
	{
		istGut(v) = (lhs(v) & 0) | (!lhs(v) & istGut(v))
	}
}

%action Set_Ist_Gut_True(lhs) {
	%t lhs + "->istGut = true"
	{
		istGut(v) = (lhs(v) & 1) | (!lhs(v) & istGut(v))
	}
}

%action Set_Ist_Schlecht_Opposite(lhs) {
	%t lhs + "->istSchlecht = !" + lhs + "->istGut"
	{
		istSchlecht(v) = !istGut(v) & !isArbitrary(v)
	}
}

%action Is_Good(lhs) {
	%t lhs + "->istGut == true"
	%f { lhs(v) & istGut(v) }
	%p E(v) lhs(v) & istGut(v)
}

%action Is_Not_Good(lhs) {
	%t lhs + "->istGut == false"
	%f { lhs(v) & istSchlecht(v) }
	%p A(v) !(lhs(v) & istGut(v))
}

%action Free_Arbitrary() {
	%t "Free_Arbitrary()"
	{
    t[n](v_1, v_2) = t[n](v_1, v_2)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)  
  }
	%retain !isArbitrary(v) | |/{r[n, z](v): z in PVar}
}

///////////////////////////////////////////////////////////////////////////
// own assertions

%action Assert_No_Reachable_Arbitrary() {
	%t "Assert_No_Arbitrary()"
	%p E(v) isArbitrary(v) & |/{r[n, z](v): z in PVar}
	%message ( E(v) isArbitrary(v) ) -> "There is a pointer pointing to an arbitrary logical individual, i.e., there is somewhere an uninitialized variable that is used!"
}

%action Assert_Good_Linsen(lhs) {
	%t "Assert_Good_Linsen()"
	%p E(v) r[n, lhs](v) & !istGut(v)
	%message ( E(v) r[n, lhs](v) & !istGut(v) ) -> "There is a linse reachable from guteLinsen which is not a good one!"
}

%action Assert_Bad_Linsen(lhs) {
	%t "Assert_Bad_Linsen()"
	%p E(v) r[n, lhs](v) & !istSchlecht(v)
	%message ( E(v) r[n, lhs](v) & !istSchlecht(v) ) -> "There is a linse reachable from schlechteLinsen which is not a bad one!"
}

%action Assert_No_Leak_End(good, bad) {
	%t "Assert_No_Leak_End()"
	%p E(v) (r[n, good](v) & r[n, bad](v)) | (!r[n, bad](v) & !r[n, good](v) & !isArbitrary(v))
	%message ( E(v) (r[n, good](v) & r[n, bad](v)) | (!r[n, bad](v) & !r[n, good](v) & !isArbitrary(v)) ) -> "There is a linse that is not reachable or reachable from guteLinsen and schlechteLinsen!"
}

%action Assert_No_Good_n_Bad() {
	%t "Assert_No_Good_n_Bad()"
	%p E(v) (istGut(v) <-> istSchlecht(v)) & !isArbitrary(v)
	%message ( E(v) (istGut(v) <-> istSchlecht(v)) & !isArbitrary(v) ) -> "There is a linse that is good and bad or neither good nor bad or not definitive one of both!"
}


///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = NULL"
  {
    lhs(v) = 0
  }
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  {
    lhs(v) = rhs(v) 
  }
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n, lhs](v) = isNew(v)
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)
  }
}

%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %f { lhs(v) }
  %message (E(v, v_1) lhs(v) & n(v, v_1)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  {
    t[n](v_1, v_2) = t[n](v_1, v_2)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)  
  }
  %retain !lhs(v)
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
  }
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %f { 
       lhs(v),
       // optimized change-formula for t[n] update-formula
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs

  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
  }
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %f {
       lhs(v), rhs(v),
       // optimized change-formula for t[n] upate-formula
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
  }
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
}


/////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) r[n,lhs](v) & is[n](v)
  %message ( E(v) r[n,lhs](v) & is[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) !r[n,lhs](v)
  %message ( E(v) !r[n,lhs](v) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
}
